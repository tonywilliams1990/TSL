// Test the Tmatrix class
#include <iostream>
#include "Tmatrix.h"

using namespace std;

int main()
{
    cout << "----- TESTING Tmatrix -----" << endl;

    /* ----- TESTING Tmatrix class ----- */	
		
	TNoddy::Tmatrix<double> matrix(2,4,0.0);						// Declare an instance of Tmatrix
	cout << "matrix.rows() : " << matrix.rows() << endl;			// Test rows method
	cout << "matrix.cols() : " << matrix.cols() << endl;			// Test cols method
	cout << "matrix.numel() : " << matrix.numel() << endl;			// Test numel method
	matrix.fill( 1.0 );												// Test fill method
	cout << "matrix(0,3) : " << matrix(0,3) << endl;				// Test read indexing
	matrix(0,3) = 2.3; 
	cout << "matrix(0,3) : " << matrix(0,3) << endl;				// Test read/write indexing

	TNoddy::Tmatrix<double> matrix_2(2,4,1.7);
	cout << "matrix_2(0,0) : " << matrix_2(0,0) << endl;			// Test fill initialisation

	matrix = matrix_2;												// Test assignment
	cout << "matrix : " << matrix << endl;							// Test output

	TNoddy::Tmatrix<double> matrix_3( matrix );						// Test copy constructor
	cout << "matrix_3 : " << matrix_3 << endl;

	matrix_3 = +matrix_3;											// Test unary + 
	cout << "matrix_3 : " << matrix_3 << endl;

	matrix_3 = -matrix_3;											// Test unary - 
	cout << "matrix_3 : " << matrix_3 << endl;

	matrix = matrix_2 + matrix_3;									// Test binary +
	cout << "m = m_2 + m_3 : " << matrix << endl;

	matrix = matrix_2 - matrix_3;									// Test binary -
	cout << "m = m_2 - m_3 : " << matrix << endl;

	matrix = matrix_3 * 2.0;										// Test scalar multiplication
	cout << "m = m_3 * 2.0 :" << matrix << endl;					// must be matrix * scalar

	matrix = matrix_3 / 2.0;										// Test scalar division
	cout << "m = m_3 / 2.0 :" << matrix << endl;					// must be matrix / scalar

	matrix += matrix_3;												// Test +=
	cout << "m += m_3 :" << matrix << endl;	

	matrix -= matrix_3;												// Test -=
	cout << "m -= m_3 :" << matrix << endl;	
		
	// Test matrix multiplication
	TNoddy::Tmatrix<double> mat(4,3,1.7);
	mat(0,1) = 1.2;	
	mat(3,1) = 4.3;
	cout << "mat = " << mat << endl;	
	TNoddy::Tmatrix<double> mult(2,3,0.0);
	mult = matrix * mat;
	cout << "mult = m * mat = " << mult << endl;
    mult(0,2) = 6.62;
    cout << "mult = " << mult << endl;
 
	cout << "mult.cols() = " << mult.cols() << endl;
	cout << "mult.rows() = " << mult.rows() << endl;

	cout << "mult.transpose() = " << mult.transpose() << endl;		// Test transpose
	cout << "mult.conjugate()= " << mult.conjugate() << endl;		// Test conjugate
	cout << "mult.adjoint()= " << mult.adjoint() << endl;			// Test adjoint
	cout << "mult.trace()= " << mult.trace() << endl;				// Test trace
	cout << "mult.sum()= " << mult.sum() << endl;					// Test sum
	cout << "mult.prod()= " << mult.prod() << endl;					// Test prod
	cout << "mult.mean()= " << mult.mean() << endl;					// Test mean

	cout << "mult.norm_1()= " << mult.norm_1() << endl;             // Test 1-norm
    cout << "mult.norm_inf()= " << mult.norm_inf() << endl;         // Test inf-norm
    cout << "mult.norm_frob()= " << mult.norm_frob() << endl;       // Test Frobenius norm
    cout << "mult.norm_max()= " << mult.norm_max() << endl;         // Test max norm
    cout << "mult.norm_p(p=2.7)= " << mult.norm_p(2.7) << endl;     // Test p-norm 

    // Test set_col
    TNoddy::Tvector<double> vec( 4, 0.0 );
    cout << "mat = " << mat << endl;
    cout << "vec = " << vec << endl;
    mat.set_col( 2, vec );
    cout << "mat.set_col( 2, vec ) = " << mat << endl;
    

	cout << "FINISHED" << endl;

}

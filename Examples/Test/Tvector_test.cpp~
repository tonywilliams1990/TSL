// Test the Tvector class
#include <iostream>
#include "Tvector.h"

using namespace std;

int main()
{
    cout << "----- TESTING Tvector -----" << endl;

    /* ----- TESTING Tvector class ----- */	
		
	TNoddy::Tvector<double> v1;						// Creat an instance
	TNoddy::Tvector<double> v2(4, 4.1);				// An initialised instance 
	cout << "First element = " << v2[0] << endl;	// Test indexing
	cout << "v2.size() = " << v2.size() << endl;	// Test the size method
	TNoddy::Tvector<double> v3( v2 );				// Test copy constructor
	cout << "v3[3] = " << v3[3] << endl; 

    // Test iterators
	for (std::vector<double>::iterator it = v2.begin() ; it != v2.end(); ++it)
	{
    		cout << ' ' << *it;
	}
	cout << endl;

	// Test assignment
	v3[0] = 17.0;
	v2 = v3;
	cout << "v2[0] = " << v2[0] << endl;

	// Test unary +
	v3[2] = -1;
	v2 = + v3;
	cout << "v2 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;
	cout << "v3 : " << v3[0] << " " << v3[1] << " " << v3[2] << " " << v3[3] << endl;

	// Test unary -
	v2 = -v2;
	cout << "v2 = -v2 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

    // Test  += 
	v2 += v3;
	cout << "v2 += v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test  -= 
	v2 -= v3;
	cout << "v2 -= v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test  *= 
	v2 *= v3;
	cout << "v2 *= v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test /=
	v2 /= v3;
	cout << "v2 /= v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test binary + 
	v2 = v2 + v3;
	cout << "v2 = v2 + v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test binary -
	v2 = v2 - v3;
	cout << "v2 = v2 - v3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test scalar multiplication
	v2 = v2 * 2;	
	cout << "v2 = v2 * 2 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test scalar division
	v2 = v2 / 3;	
	cout << "v2 = v2 / 3 : " << v2[0] << " " << v2[1] << " " << v2[2] << " " << v2[3] << endl;

	// Test push_back method
	v1.push_back( 3.14159 );
	cout << "v1 : " << v1[0] << endl;

	// Test resize method
	v1.resize( 4 );
	cout << "v1 : " << v1[0] << " " << v1[1] << " " << v1[2] << " " << v1[3] << endl;

	// Test clear method
	v1.clear();
	cout << "v1.size() = " << v1.size() << endl;

	// Test reserve + capacity methods
	v1.reserve( 4 );
	cout << "v1.capacity = " << v1.capacity() << endl;

    // Test abs method
	TNoddy::Tvector<double> abs_vals;
	abs_vals = v2.abs();
	cout << "v2.abs() : " << abs_vals[0] << " " << abs_vals[1] << " " << abs_vals[2] << " " << 
		abs_vals[3] << " " << endl; 

    // Test L1 norm
	cout << "L1 norm v2: " << v2.norm_1() << endl;

	// Test L2 norm
	cout << "L2 norm v2: " << v2.norm_2() << endl;

	// Test Lp norm
	cout << "Lp norm v2 (p = 2.3): " << v2.norm_p( 2.3 ) << endl;

	// Test inf norm
	cout << "inf norm v2: " << v2.norm_inf() << endl;

	// Test output
	cout << "v2 = " << v2 << endl;

	// Test swap
	v2.swap(0,2);
	cout << "v2 = " << v2 << endl;

	// Test assign - 7 doubles with value 12.3
	v1.assign( 7, 12.3 );
	cout << "v1 = " << v1 << endl;

    // Test initialise a vector (compiler flag -std=c++14)
	// TNoddy::Tvector<double> vec( { 2.0, 1.3, 7.0 } );
	// cout << "vec = " << vec << endl;

	// Test int type
	// TNoddy::Tvector<int> int_vec( { 1, 2, 3 } );
	// int_vec.push_back( 6 );
	// cout << "int_vec = " << int_vec << endl;

	// Test linspace method
	TNoddy::Tvector<double> vec_lin;
	vec_lin.linspace(0,1,11);
	cout << "vec_lin = " << vec_lin << endl;

	// Test product method
	double prod;
	prod = vec_lin.product(1,vec_lin.size() - 1);
	cout << "prod = " << prod << endl;

	// Test sum method
	double sum;
	sum = vec_lin.sum(1,vec_lin.size() - 1);	
	cout << "sum = " << sum << endl;

    // Test scale method
    v1.scale( 2.0 );
    cout << "v1.scale( 2.0 ) = " << v1 << endl;

    cout << "FINISHED" << endl;

}

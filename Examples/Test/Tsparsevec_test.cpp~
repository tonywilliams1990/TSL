// Test the Tsparse_vector class
#include <iostream>
#include "Tsparse_vector.h"

using namespace std;

int main()
{
    cout << "----- TESTING Tsparse_vector -----" << endl;

    /* ----- TESTING Tsparse_vector class ----- */	
	
    TNoddy::Tsparse_vector<double> Tsv(100);                    // Construct a sparse vector with 100 elements
    TNoddy::Tsparse_vector<double> Tsv2;                        // Construct an empty sparse vector 
    TNoddy::Tsparse_vector<double> Tsv3( Tsv );                 // Copy construction
    Tsv[23] = 0.234;                                            // Test indexing (write)
    Tsv2 = Tsv;                                                 // Test assignment
    cout << "Tsv2[23] = " << Tsv2[23] << endl;                  // Test indexing (read)
    Tsv2[17] = 0.45; Tsv2[45] = 587.0;
    cout << "Tsv2 = " << Tsv2 << endl;

    cout << "Tsv2.max_size() = " << Tsv2.max_size() << endl;    // Test max_size() method
    Tsv2.resize(200);
    cout << "Tsv2.max_size() = " << Tsv2.max_size() << endl;    // Test resize() method
    Tsv2.clear();
    cout << "Tsv2 = " << Tsv2 << endl;                          // Test clear() method
    Tsv.erase(23);
    cout << "Tsv = " << Tsv << endl;                            // Test erase() method
    Tsv[33] = 0.3542; Tsv[65] = 0.45; 
    Tsv2[33] = 0.42; Tsv2[15] = 0.522; 
    cout << "Tsv = " << Tsv << endl;
    Tsv.swap(33,65);                                            // Test swap(i,j) method
    cout << "Tsv = " << Tsv << endl;
    cout << "Tsv.numel() : " << Tsv.numel() << endl;            // Test numel() method

    // Operator testing
    cout << "+Tsv : " << +Tsv << endl;                          // Test unary +
    cout << "-Tsv : " << -Tsv << endl;                          // Test unary -
    cout << "Tsv * 2.0 : " << Tsv * 2.0 << endl;                // Test scalar multiplication *
    Tsv *= 2.5;
    cout << "Tsv *= 2.5 : " << Tsv << endl;                     // Test multiplication assignment *=
    Tsv2[17] = 0.45; Tsv2[45] = 587.0;
    cout << "Tsv2 : " << Tsv2 << endl;
    Tsv.resize(200);
    cout << "Tsv.max_size() = " << Tsv.max_size() << endl;    
    Tsv += Tsv2;
    cout << "Tsv += Tsv2 : " << Tsv << endl;                    // Test addition assignment +=
    Tsv -= Tsv2;    
    cout << "Tsv -= Tsv2 : " << Tsv << endl;                    // Test subtraction assignment -=
    cout << "Tsv + Tsv2 : " << Tsv + Tsv2 << endl;              // Test binary +
    cout << "Tsv - Tsv2 : " << Tsv - Tsv2 << endl;              // Test binary -
    cout << "Tsv2 : " << Tsv2 << endl;

    // Norm testing 
    cout << "Tsv2.norm_1() : " << Tsv2.norm_1() << endl;                // Test L1-norm
    cout << "Tsv2.norm_2() : " << Tsv2.norm_2() << endl;                // Test L2-norm
    cout << "Tsv2.norm_p( 1.78 ) : " << Tsv2.norm_p( 1.78 ) << endl;    // Test Lp-norm
    cout << "Tsv2.norm_inf() : " << Tsv2.norm_inf() << endl;            // Test inf-norm

    cout << "Tsv2.get(15) : " << Tsv2.get(15) << endl;                  // Test get method
    //Tsv2.clear();
    if ( Tsv2.isempty() )                                               // Test isempty() method
    {
        cout << "Tsv2 is empty" << endl;
    }
    else
    {
        cout << "Tsv2 is not empty" << endl; 
    }
    // Test index_list() method
    std::vector<std::size_t> index;
    index = Tsv2.index_list();                                      
    for (std::size_t i=0; i<index.size(); ++i)
    { cout << index[i] << ", "; }
    cout << endl; 

    // Test element_list() method
    std::vector<double> element;
    element = Tsv2.element_list();
    for (std::size_t i=0; i<element.size(); ++i)
    { cout << element[i] << ", "; }
    cout << endl;	
	

    cout << "FINISHED" << endl;

}

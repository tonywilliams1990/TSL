// Test the Teigenvalue class
#include <iostream>

#include <Eigen/Eigenvalues>
#include "Teigensystem.h"

using namespace std;
//using namespace Eigen;

int main()
{
    cout << "----- TESTING GeneralizedEigenSolver -----" << endl;

    /* ----- TESTING GeneralizedEigenSolver ----- */	
		
    Eigen::GeneralizedEigenSolver< Eigen::Matrix<double,-1,-1> > ges;
	//Eigen::MatrixXf A = Eigen::MatrixXf::Random(4,4);
    //Eigen::MatrixXf B = Eigen::MatrixXf::Random(4,4);

    Eigen::Matrix<double,4,4> A;
    Eigen::Matrix<double,4,4> B;

    double N = 4.0;
    double delta2 = (1.0 / (N - 1.0)) * (1.0 / (N - 1.0));
 
    cout << "delta2 = " << delta2 << endl;

    A(0,0) = 1.0;  		 A(0,1) = 0.0;		   A(0,2) = 0.0;         A(0,3) = 0.0;
    A(1,0) = 1.0/delta2; A(1,1) = -2.0/delta2; A(1,2) = 1.0/delta2;  A(1,3) = 0.0; 
    A(2,0) = 0.0;		 A(2,1) = 1.0/delta2;  A(2,2) = -2.0/delta2; A(2,3) = 1.0/delta2;
    A(3,0) = 0.0;		 A(3,1) = 0.0;		   A(3,2) = 0.0;		 A(3,3) = 1.0;

    B(0,0) = -1.0; 		 B(0,1) = 0.0;		   B(0,2) = 0.0;		 B(0,3) = 0.0;
	B(1,0) = 0.0;		 B(1,1) = -1.0; 	   B(1,2) = 0.0;		 B(1,3) = 0.0;
	B(2,0) = 0.0;		 B(2,1) = 0.0;		   B(2,2) = -1.0; 		 B(2,3) = 0.0;
	B(3,0) = 0.0;		 B(3,1) = 0.0;		   B(3,2) = 0.0;		 B(3,3) = -1.0;

    //cout << "A = " << endl << A << endl;
    //cout << "B = " << endl << B << endl;

    ges.compute(A, B); 

    cout << "The (complex) numerators of the generalzied eigenvalues are: " << ges.alphas().transpose() << endl;
    cout << "The (real) denominators of the generalzied eigenvalues are: " << ges.betas().transpose() << endl;
    cout << "The generalized eigenvalues are: " << ges.eigenvalues() << endl;

    std::complex<double> eig_1 =  ges.eigenvalues()[0];
    cout << "ges.eigenvalues()[0] = " << eig_1 << endl;
    
    std::size_t n_eig = ges.eigenvalues().size();
    cout << "Number of eigenvalues = " << n_eig << endl;

    // QZ algorithm
    Eigen::RealQZ< Eigen::Matrix<double,-1,-1> > qz;
    qz.compute(A,B);  // A = Q S Z, B = Q T Z

    // print original matrices and result of decomposition
    cout << "A:\n" << A << "\n" << "B:\n" << B << "\n";
    cout << "S:\n" << qz.matrixS() << "\n" << "T:\n" << qz.matrixT() << "\n";
    cout << "Q:\n" << qz.matrixQ() << "\n" << "Z:\n" << qz.matrixZ() << "\n";

    // Find eigenvectors of S and T
    Eigen::EigenSolver< Eigen::Matrix<double,-1,-1> > es;
    es.compute(qz.matrixS());
    cout << "The eigenvectors of S are: " << endl << es.eigenvectors() << endl;

    es.compute(qz.matrixT());
    cout << "The eigenvectors of T are: " << endl << es.eigenvectors() << endl;

    /* -------------------------------------------------------------------------------*/

    cout << "----- TESTING Teigensystem -----" << endl;

    /* ----- TESTING Teigensystem class ----- */

    TNoddy::Teigensystem< double > system;                  // Construct Teigensystem object

    TNoddy::Tmatrix<double> A_mat(4,4,0.0);
    TNoddy::Tmatrix<double> B_mat(4,4,0.0);

    A_mat(0,0) = 1.0;  
    A_mat(1,0) = 1.0/delta2; A_mat(1,1) = -2.0/delta2; A_mat(1,2) = 1.0/delta2; A_mat(1,3) = 0.0; 
    A_mat(2,1) = 1.0/delta2; A_mat(2,2) = -2.0/delta2; A_mat(2,3) = 1.0/delta2;
    A_mat(3,3) = 1.0;

    B_mat(0,0) = -1.0; B_mat(1,1) = -1.0; B_mat(2,2) = -1.0; B_mat(3,3) = -1.0;

    cout << "A = " << endl << A_mat << endl;
    cout << "B = " << endl << B_mat << endl;

    // Test the compute method
    bool compute_eigenvectors = true;
    system.compute(A_mat,B_mat, compute_eigenvectors );

    // Test eigenvalues() method
    TNoddy::Tvector< std::complex<double> > evals;
    evals = system.eigenvalues(); 
    cout << "The eigenvalues are: " << evals << endl;

    // Test alphas() method
    TNoddy::Tvector< std::complex<double> > alphas;
    alphas = system.alphas();
    cout << "The alphas are: " << alphas << endl;

    // Test betas() method
    TNoddy::Tvector<double> betas;
    betas = system.betas();
    cout << "The betas are: " << betas << endl;

    // Test eigenvector_matrix() method
    TNoddy::Tmatrix< std::complex<double> > evecs;
    evecs = system.eigenvector_matrix();
    cout << "The eigenvectors are: " << endl << evecs << endl;

    // Test the eigenvectors() method

    std::vector< TNoddy::Tvector< std::complex<double> > > eigenvectors;
    eigenvectors = system.eigenvectors();   
    cout << "The first eigenvector is " << eigenvectors[0] << endl;
    
    cout << "system.eigenvectors()[2] = " << system.eigenvectors()[2] << endl;

    cout << "FINISHED" << endl;

}

import os.path
import glob

Import( 'env opts incdir libdir topdir libs ' )

print "----- Building TSL codes -----"

# Testing codes

env.Program( 'Test/Matrix_test.out' , ['Test/Matrix_test.cpp'] , OPTS = opts, LIBS = libs)  #Matrix
env.Program( 'Test/Vector_test.out' , ['Test/Vector_test.cpp'] , OPTS = opts, LIBS = libs)  #Vector
env.Program( 'Test/LinSys_test.out' , ['Test/LinSys_test.cpp'] , OPTS = opts, LIBS = libs)  #Linear system
env.Program( 'Test/Sparse_test.out' , ['Test/Sparse_test.cpp'] , OPTS = opts, LIBS = libs)  #SparseMatrix
env.Program( 'Test/Residual_test.out' , ['Test/Residual_test.cpp'] , OPTS = opts, LIBS = libs)  #Residual
env.Program( 'Test/Newton_test.out' , ['Test/Newton_test.cpp'] , OPTS = opts, LIBS = libs)  #Newton
env.Program( 'Test/Node1D_test.out' , ['Test/Node1D_test.cpp'] , OPTS = opts, LIBS = libs)  #OneD_node_mesh
env.Program( 'Test/ODE_test.out' , ['Test/ODE_test.cpp'] , OPTS = opts, LIBS = libs)  #ODE_BVP
env.Program( 'Test/Eigen_test.out' , ['Test/Eigen_test.cpp'] , OPTS = opts, LIBS = libs)  #Eigensystem
env.Program( 'Test/Dual_test.out' , ['Test/Dual_test.cpp'] , OPTS = opts, LIBS = libs)  #Dual numbers
env.Program( 'Test/AutoDiff_test.out' , ['Test/AutoDiff_test.cpp'] , OPTS = opts, LIBS = libs)  #AutoDiff
env.Program( 'Test/Arc_BVP_test.out' , ['Test/Arc_BVP_test.cpp'] , OPTS = opts, LIBS = libs)  #ODE_BVP (arc-length)
env.Program( 'Test/BVP_test.out' , ['Test/BVP_test.cpp'] , OPTS = opts, LIBS = libs)  #BVP

# Project codes

env.Program( 'Project/Base_Flow_Transpiration.out' , ['Project/Base_Flow_Transpiration.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Eigenvalue_Problem.out' , ['Project/Eigenvalue_Problem.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/General_Ridge.out' , ['Project/General_Ridge.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/General_Base_Flow.out' , ['Project/General_Base_Flow.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Blowing_pressure_gradient.out' , ['Project/Blowing_pressure_gradient.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Parabolic_system.out' , ['Project/Parabolic_system.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Parabolic_system_2D.out' , ['Project/Parabolic_system_2D.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Delta_transp_2D_base.out' , ['Project/Delta_transp_2D_base.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Falkner_Skan_with_blowing.out' , ['Project/Falkner_Skan_with_blowing.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Eigenvalue_Problem_pressure_gradient.out' , ['Project/Eigenvalue_Problem_pressure_gradient.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Blowing_K_step.out' , ['Project/Blowing_K_step.cpp'] , OPTS = opts, LIBS = libs )
env.Program( 'Project/Blowing_marching.out' , ['Project/Blowing_marching.cpp'] , OPTS = opts, LIBS = libs )

# Example problem codes

env.Program( 'Problems/Heat_diffusion.out' , ['Problems/Heat_diffusion.cpp'] , OPTS = opts, LIBS = libs)  #IBVP
env.Program( 'Problems/Falkner_Skan_marching.out' , ['Problems/Falkner_Skan_marching.cpp'] , OPTS = opts, LIBS = libs)  #IBVP

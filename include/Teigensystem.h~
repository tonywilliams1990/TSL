/* Teigensystem class - Solves generalised eigenvalue problems
        of the form A*v=lambda*B*v where A and B are matrices,
        lambda is an eigenvalue and v is an eigenvector 
*/
 
#ifndef TEIGENSYSTEM_H
#define TEIGENSYSTEM_H

#include "Tmatrix.h"
#include "Tvector.h"


namespace TNoddy
{

	// Templated generalised eigen system class.
	template <typename T>

	class Teigensystem
	{

	private:
            std::size_t N;                                          // Number of eigenvalues
            Tvector< std::complex<double> > EIGENVALUES;            // Vector for storing eigenvalues
	        Tvector< std::complex<double> > ALPHAS;                 // Vector for storing complex numerators
            Tvector< double > BETAS;                                // Vector for storing real denominators
            Tmatrix< std::complex<double> > EIGENVECTORS;           // Matrix for storing eigenvectors
            bool EIGENVECTORS_COMPUTED;                             // Boolean - true if eigenvectors are calculated
	public:

            /* ----- Constructors and Destructor ----- */
	
		    // Constructor 
	        Teigensystem();

            // Destructor
	       	~Teigensystem();

            /* ----- Methods ----- */

            // Compute the eigenvalues ( and eigenvectors )
            void compute( const Tmatrix<T>& A, const Tmatrix<T>& B, bool& compute_eigenvectors = false );

            // Return the computed eigenvalues 
            Tvector< std::complex<double> > eigenvalues() const;

            // Return the complex numerators of the eigenvalues
            Tvector< std::complex<double> > alphas() const;

            // Return the real denominators of the eigenvalues
            Tvector<double> betas() const; 

            // Return the matrix of eigenvalues
            Tmatrix< std::complex<double> > eigenvector_matrix() const; 

            // Return an std::vector of eigenvectors
            std::vector< Tvector< std::complex<double> > > eigenvectors() const;         
		
	   	
	}; // End of Teigensystem class


} // End of namespace TNoddy

#endif
